
#Область ПрограммныйИнтерфейс

// Читает CSV и возвращает массив массивов
//
// Параметры:
//  ЧтениеТекста - ЧтениеТекста - Объект ЧтениеТекста из файла CSV
//  Разделитель	 - Строка - Чем делить поля в CSV
// 
// Возвращаемое значение:
//  Массив из Массив из Строка - прочитанные значения
//
Функция ПрочитатьИзТекста(Знач ЧтениеТекста, Знач Разделитель) Экспорт
	
	массивСтрокФайла = Новый Массив;
	
	ПрочитаннаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
	
	Пока Не ПрочитаннаяСтрока = Неопределено Цикл
		
		Если ПустаяСтрока(ПрочитаннаяСтрока) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		компонентыСтроки = РазбитьСтроку(ПрочитаннаяСтрока, Разделитель);
		
		массивСтрокФайла.Добавить(компонентыСтроки);
		
		ПрочитаннаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
		
	КонецЦикла;
	
	Возврат массивСтрокФайла;
	
КонецФункции

// Возвращает поля из строки CSV
//
// Параметры:
//  СтрокаИсточник - Строка - Строка CSV
//  Разделитель	 - Строка - Чем делить поля в CSV
// 
// Возвращаемое значение:
//  Массив из Строка - прочитанные значения
//
Функция РазбитьСтроку(СтрокаИсточник, Разделитель) Экспорт
	
	компоненты = Новый Массив;
	
	Если СтрокаИсточник = "" Тогда
		
		Возврат компоненты;
		
	КонецЕсли;
	
	длинаРазделителя = СтрДлина(Разделитель);
	
	параметрыРазметки = Новый Структура;
	параметрыРазметки.Вставить("Разделитель", Разделитель);
	параметрыРазметки.Вставить("ДлинаСтроки", СтрДлина(СтрокаИсточник));
	параметрыРазметки.Вставить("НачальнаяПозиция", 1);
	параметрыРазметки.Вставить("ДвойныеКавычки", Истина);
	параметрыРазметки.Вставить("ОдинарныеКавычки", Истина);
	
	начальнаяРазметка = Новый Структура;
	начальнаяРазметка.Вставить("ДвойныеКавычки", Новый Структура("Начало,Конец", 0, 0));
	начальнаяРазметка.Вставить("ОдинарныеКавычки", Новый Структура("Начало,Конец", 0, 0));
	
	началоКомпонента = 1;
	
	разметкаСтроки = РазметкаСтроки(СтрокаИсточник, параметрыРазметки, начальнаяРазметка);
	
	Пока разметкаСтроки.ПоложениеРазделителя > 0 Цикл
		
		компоненты.Добавить(Сред(СтрокаИсточник, началоКомпонента, разметкаСтроки.ПоложениеРазделителя - началоКомпонента));
		
		началоКомпонента = разметкаСтроки.ПоложениеРазделителя + длинаРазделителя;
		параметрыРазметки.НачальнаяПозиция = началоКомпонента;
		
		разметкаСтроки = РазметкаСтроки(СтрокаИсточник, параметрыРазметки, разметкаСтроки);
		
	КонецЦикла;
	
	// Остаток от строки
	Если началоКомпонента > 0 Тогда
		
		компоненты.Добавить(Сред(СтрокаИсточник, началоКомпонента));
		
	КонецЕсли;
	
	Возврат компоненты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазметкаСтроки(СтрокаИсточник, ПараметрыРазметки, ПредыдущаяРазметка)
	
	разметка = Новый Структура;
	
	Если ПараметрыРазметки.НачальнаяПозиция > ПараметрыРазметки.ДлинаСтроки Тогда
		
		// Вариант, когда разделитель последний в строке
		
		разметка.Вставить("ПоложениеРазделителя", 0);
		Возврат разметка;
		
	КонецЕсли;
	
	положение = СтрНайти(СтрокаИсточник, ПараметрыРазметки.Разделитель, , ПараметрыРазметки.НачальнаяПозиция);

	разметка.Вставить("ПоложениеРазделителя", положение);
	
	УчестьКавычки(СтрокаИсточник, ПараметрыРазметки, разметка, ПредыдущаяРазметка, "ДвойныеКавычки", """");
	УчестьКавычки(СтрокаИсточник, ПараметрыРазметки, разметка, ПредыдущаяРазметка, "ОдинарныеКавычки", "'");
	
	Возврат разметка;
	
КонецФункции

Процедура УчестьКавычки(Знач СтрокаИсточник,
						ПараметрыРазметки,
						Разметка,
						ПредыдущаяРазметка,
						Знач ИмяКавычек,
						Знач ЗначениеКавычек)
							
	Если Не ПараметрыРазметки[ИмяКавычек] Тогда
		
		// Если нет этих кавычек в строке, то можно ничего не искать
		
		Возврат;
		
	КонецЕсли;
	
	НайтиКавычки(СтрокаИсточник, ПараметрыРазметки, Разметка, ПредыдущаяРазметка, ИмяКавычек, ЗначениеКавычек);
	
	Если Не ПараметрыРазметки[ИмяКавычек] Тогда
		
		// Кавычек может не оказаться в новой части строки
		
		Возврат;
		
	КонецЕсли;
	
	Если Разметка.ПоложениеРазделителя > Разметка[ИмяКавычек].Начало
		И Разметка.ПоложениеРазделителя < Разметка[ИмяКавычек].Конец Тогда
		
		ПараметрыРазметки.НачальнаяПозиция = Разметка[ИмяКавычек].Конец + 1;
		
		ПредыдущаяРазметка = Разметка;
		
		Разметка = РазметкаСтроки(СтрокаИсточник, ПараметрыРазметки, ПредыдущаяРазметка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиКавычки(Знач СтрокаИсточник,
					   ПараметрыРазметки,
					   Разметка,
					   Знач ПредыдущаяРазметка,
					   Знач ИмяКавычек,
					   Знач ЗначениеКавычек)
					   	
	// Если кавычки уже были найдены, а позиция не дошла до них, то не повторяем поиск
	
	Если ПредыдущаяРазметка.Свойство(ИмяКавычек)
		И ПредыдущаяРазметка[ИмяКавычек].Начало > ПараметрыРазметки.НачальнаяПозиция Тогда
		
		началоКавычек = ПредыдущаяРазметка[ИмяКавычек].Начало;
		конецКавычек  = ПредыдущаяРазметка[ИмяКавычек].Конец;
		
	Иначе
		
		началоКавычек = СтрНайти(СтрокаИсточник, ЗначениеКавычек, , ПараметрыРазметки.НачальнаяПозиция);
		конецКавычек  = 0;
		
	КонецЕсли;
	
	Если началоКавычек = 0 Тогда
		
		ПараметрыРазметки[ИмяКавычек] = Ложь;
		
	Иначе
		
		Если конецКавычек = 0 Тогда
			
			конецКавычек = СтрНайти(СтрокаИсточник, ЗначениеКавычек, , ПараметрыРазметки.НачальнаяПозиция, 2);
			
		КонецЕсли;
		
		Если конецКавычек = 0 Тогда
			
			// Нет закрывающей кавычки. А поддержка многострочных значений не тут должна поддерживаться.
			
			конецКавычек = СтрДлина(СтрокаИсточник);
			
		КонецЕсли;
		
		кавычки = Новый Структура("Начало,Конец", началоКавычек, конецКавычек);
		
		Разметка.Вставить(ИмяКавычек, кавычки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти