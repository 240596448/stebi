#Использовать logos
#Использовать v8metadata-reader

Перем _Лог;

Перем _ПрименятьНастройки;
Перем _ФайлыОшибок;
Перем _ФайлНастроек;
Перем _КаталогИсходников;
Перем _ФайлыСИсходнымКодом;

Перем _КешПравил;

Перем _УдалятьПоддержку;
Перем _ДанныеПоддержки;

Перем _ФильтрПоПодсистемам;
Перем _ДанныеФильтраПоПодсистемам;

Перем ВАЖНОСТЬ_ПРОПУСТИТЬ;
Перем ДОСТУПНЫЕ_ВАЖНОСТИ;
Перем ДОСТУПНЫЕ_ТИПЫ;

#Область ПрограммныйИнтерфейс

Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Аргумент(
		"GENERIC_ISSUE_JSON",
		"",
		"Путь к файлам generic-issue.json, на основе которых будет создан файл настроек. Например ./edt-json.json,./acc-generic-issue.json")
	.ТСтрока()
	.ВОкружении("GENERIC_ISSUE_JSON");
	
	Команда.Опция("s settings", "", "Путь к файлу настроек. Например -s=./generic-issue-settings.json")
	.ТСтрока()
	.ВОкружении("GENERIC_ISSUE_SETTINGS_JSON");
	
	Команда.Опция("src", "", "Путь к каталогу с исходниками. Например -src=./src")
	.ТСтрока()
	.ВОкружении("SRC");
	
	Команда.Опция("r remove_support", "", "Удаляет из отчетов файлы на поддержке. Например -r=0
		|		0 - удалить файлы на замке,
		|		1 - удалить файлы на замке и на поддержке
		|		2 - удалить файлы на замке, на поддержке и снятые с поддержки")
	.ТЧисло()
	.ВОкружении("GENERIC_ISSUE_REMOVE_SUPPORT");
	
	Команда.Опция("f filter_by_subsystem", "", "Фильтр по подсистеме в формате [+/-]Подсистема1.Подсистема2[*][^].
		|		Например, исключение подсистем СтандартныеПодсистемы и ПодключаемоеОборудование и всех дочерних объектов
		|			'-СтандартныеПодсистемы*, -ПодключаемоеОборудование*'")
	.ТСтрока()
	.ВОкружении("GENERIC_ISSUE_FILTER_BY_SUBSYSTEM");
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	ВАЖНОСТЬ_ПРОПУСТИТЬ = "SKIP";
	ДОСТУПНЫЕ_ВАЖНОСТИ = Новый Массив;
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("BLOCKER");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("CRITICAL");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("MAJOR");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("MINOR");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("INFO");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("SKIP");
	
	ДОСТУПНЫЕ_ТИПЫ = Новый Массив;
	ДОСТУПНЫЕ_ТИПЫ.Добавить("BUG");
	ДОСТУПНЫЕ_ТИПЫ.Добавить("VULNERABILITY");
	ДОСТУПНЫЕ_ТИПЫ.Добавить("CODE_SMELL");
	
	началоОбщегоЗамера = ТекущаяДата();
	
	ИнициализацияПараметров(Команда);
	
	таблицаНастроек = ТаблицаНастроек();
	
	Для каждого цФайл Из _файлыОшибок Цикл
		
		ошибкиФайла = ПрочитатьОшибкиИзФайла(цФайл);
		
		началоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		файлИзменен = Ложь;
		
		всегоОшибок = ошибкиФайла.issues.Количество();
		
		Для ц = 1 По всегоОшибок Цикл
			
			цОшибка = ошибкиФайла.issues[всегоОшибок - ц];
			
			Если ФайлНаПоддержке(цОшибка) Тогда
				
				ошибкиФайла.issues.Удалить(всегоОшибок - ц);
				файлИзменен = Истина;
				Продолжить;
				
			КонецЕсли;
			
			Если ПрименитьНастройки(цОшибка, таблицаНастроек) Тогда
				
				файлИзменен = Истина;
				
			КонецЕсли;
			
			Если цОшибка.severity = ВАЖНОСТЬ_ПРОПУСТИТЬ Тогда
				
				ошибкиФайла.issues.Удалить(всегоОшибок - ц);
				файлИзменен = Истина;
				Продолжить;
				
			КонецЕсли;
			
		КонецЦикла;
		
		_Лог.Информация("Файл <%1> обработан за %2мс", цФайл, ТекущаяУниверсальнаяДатаВМиллисекундах() - началоЗамера);
		
		ЗаписатьОшибкиВФайл(ошибкиФайла, цФайл, файлИзменен);
		
	КонецЦикла;
	
	_Лог.Информация("Общее время обработки: %1с", ТекущаяДата() - началоОбщегоЗамера);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяЛога() Экспорт
	
	Возврат "oscript.app." + ОПриложении.Имя();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализацияПараметров(Знач Команда)
	
	_Лог = Логирование.ПолучитьЛог(ИмяЛога());
	
	файлыОшибок = Команда.ЗначениеАргумента("GENERIC_ISSUE_JSON");
	_лог.Отладка("GENERIC_ISSUE_JSON = " + файлыОшибок);
	
	путьКФайлуНастроек = Команда.ЗначениеОпции("settings");
	_лог.Отладка("settings = " + путьКФайлуНастроек);
	
	путьККаталогуИсходников = Команда.ЗначениеОпции("src");
	_лог.Отладка("src = " + путьККаталогуИсходников);
	
	_УдалятьПоддержку = Команда.ЗначениеОпции("remove_support");
	_лог.Отладка("remove_support = " + _УдалятьПоддержку);
	
	_ФильтрПоПодсистемам = Команда.ЗначениеОпции("filter_by_subsystem");
	_лог.Отладка("filter_by_subsystem = " + _ФильтрПоПодсистемам);
	
	Если ЗначениеЗаполнено(путьКФайлуНастроек) Тогда
		
		_ФайлНастроек = ОбщегоНазначения.АбсолютныйПуть(путьКФайлуНастроек);
		_лог.Отладка("Файл настроек = " + _ФайлНастроек);
		
		_ПрименятьНастройки = ОбщегоНазначения.ФайлСуществует(_ФайлНастроек);
		
	Иначе
		
		_ПрименятьНастройки = Ложь;
		
	КонецЕсли;
	
	_файлыОшибок = Новый Массив;
	
	Для каждого цПутьКФайлу Из СтрРазделить(файлыОшибок, ",") Цикл
		
		Если ОбщегоНазначения.ФайлСуществует(цПутьКФайлу) Тогда
			
			файлСОшибками = ОбщегоНазначения.АбсолютныйПуть(цПутьКФайлу);
			
			_файлыОшибок.Добавить(файлСОшибками);
			
			_лог.Отладка("Добавлен файл generic-issue = " + файлСОшибками);
			
		КонецЕсли;
		
	КонецЦикла;
	
	_КаталогИсходников = ОбщегоНазначения.АбсолютныйПуть(путьККаталогуИсходников);
	каталогИсходников = Новый Файл(_КаталогИсходников);
	_лог.Отладка("Каталог исходников = " + _КаталогИсходников);
	
	Если Не каталогИсходников.Существует()
		Или Не каталогИсходников.ЭтоКаталог() Тогда
		
		_лог.Ошибка(СтрШаблон("Каталог исходников <%1> не существует. Файлы на поддержке удалены не будут", путьККаталогуИсходников));
		_УдалятьПоддержку = Неопределено;
		
	КонецЕсли;
	
	Если Не _ПрименятьНастройки
		И _УдалятьПоддержку = Неопределено Тогда
		_Лог.Ошибка("Должен быть указан файл настроек или уровень удаления поддержки.");
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	Если Не _УдалятьПоддержку = Неопределено Тогда
		
		_ДанныеПоддержки = Новый Поддержка(_КаталогИсходников);
		
	КонецЕсли;
	
	_ФайлыСИсходнымКодом = Новый Соответствие;
	
	ПодготовитьФильтрПоПодсистемам();
	
КонецПроцедуры

Функция ТаблицаНастроек()
	
	Если _ПрименятьНастройки Тогда
		
		_лог.Информация("Начало чтения файла настроек <%1>", _ФайлНастроек);
		таблицаНастроек = ОбщегоНазначения.ПолучитьТаблицуНастроек(_ФайлНастроек, _Лог);
		_лог.Информация("Из файла настроек прочитано: " + таблицаНастроек.Количество());
		
	Иначе
		
		таблицаНастроек = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Возврат таблицаНастроек;
	
КонецФункции

Функция ПрочитатьОшибкиИзФайла(Знач пФайл)
	
	ошибкиФайла = ОбщегоНазначения.ПрочитатьJSONФайл(пФайл, _Лог);
	
	Если Не ТипЗнч(ошибкиФайла) = Тип("Структура") Тогда
		
		_Лог.Ошибка("Не поддерживаемая структура файла: " + пФайл);
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Не ошибкиФайла.Свойство("issues") Тогда
		
		_Лог.Ошибка("Не поддерживаемая структура файла: " + пФайл);
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Не ТипЗнч(ошибкиФайла.issues) = Тип("Массив") Тогда
		
		_Лог.Ошибка("Не поддерживаемая структура файла: " + пФайл);
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ошибкиФайла;
	
КонецФункции

Процедура ЗаписатьОшибкиВФайл(Знач пОшибкиФайла, Знач пФайл, пФайлИзменен)
	
	Если пФайлИзменен Тогда
		
		_лог.Информация("Бекап файла: " + пФайл + ".old");
		КопироватьФайл(пФайл, пФайл + ".old");
		
		_лог.Информация("Запись в файл: " + пФайл);
		ОбщегоНазначения.ЗаписатьJSONВФайл(пОшибкиФайла, пФайл, _Лог);
		
	Иначе
		
		_лог.Информация("Изменения в файле не требуются: " + пФайл);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПрименитьНастройки(пОшибка, таблицаНастроек)
	
	естьИзменения = Ложь;
	
	ruleId = пОшибка.ruleId;
	message = пОшибка.primaryLocation.message;
	
	путьКФайлуСЗамечанием = пОшибка.primaryLocation.filePath;
	
	Если Не ЗначениеЗаполнено(путьКФайлуСЗамечанием) Тогда
		
		пОшибка.severity = ВАЖНОСТЬ_ПРОПУСТИТЬ; // Удалим все замечания без путей
		Возврат Истина;
		
	КонецЕсли;
	
	filePath = ПутьКФайлуСЗамечаниями(путьКФайлуСЗамечанием, естьИзменения);
	
	заголовокЛога = СтрШаблон("ruleId: <%1>, message: <%2>, filePath: <%3>. Установлено ",
			ruleId,
			message,
			filePath);
	
	Для каждого цСтрока Из таблицаНастроек Цикл
		
		Если пОшибка.severity = ВАЖНОСТЬ_ПРОПУСТИТЬ Тогда
			// Пропуск работает по принципу - применяем первое попавшееся,
			// когда как остальные настройки - последнее попавшееся.
			Прервать;
		КонецЕсли;
		
		Если НастройкаПрименима(ruleId, цСтрока.ruleId)
			И НастройкаПрименима(message, цСтрока.message)
			И НастройкаПрименима(filePath, цСтрока.filePath) Тогда
			
			Если ТипЗнч(цСтрока.effortMinutes) = Тип("Число")
				И Не цСтрока.effortMinutes = пОшибка.effortMinutes Тогда
				
				_лог.Отладка(заголовокЛога + "effortMinutes: " + цСтрока.effortMinutes);
				
				пОшибка.effortMinutes = цСтрока.effortMinutes;
				естьИзменения = Истина;
				
			КонецЕсли;
			
			Если Не цСтрока.severity = пОшибка.severity
				И Не ДОСТУПНЫЕ_ВАЖНОСТИ.Найти(цСтрока.severity) = Неопределено Тогда
				
				_лог.Отладка(заголовокЛога + "severity: " + цСтрока.severity);
				
				пОшибка.severity = цСтрока.severity;
				естьИзменения = Истина;
				
			КонецЕсли;
			
			Если Не цСтрока.type = пОшибка.type
				И Не ДОСТУПНЫЕ_ТИПЫ.Найти(цСтрока.type) = Неопределено Тогда
				
				_лог.Отладка(заголовокЛога + "type: " + цСтрока.type);
				
				пОшибка.type = цСтрока.type;
				естьИзменения = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат естьИзменения;
	
КонецФункции

Функция ПутьКФайлуСЗамечаниями(Знач пПутьКФайлуСЗамечанием, пЕстьИзменения)
	
	filePath = ОбеспечитьПутьКФайлуСИсходнымКодом(пПутьКФайлуСЗамечанием);
	
	Если Не filePath = пПутьКФайлуСЗамечанием Тогда
		
		пЕстьИзменения = Истина;
		пОшибка.primaryLocation.filePath = filePath;
		
		Для каждого цВспомогательнаяСтрока Из пОшибка.secondaryLocations Цикл
			
			цВспомогательнаяСтрока.filePath = ОбеспечитьПутьКФайлуСИсходнымКодом(цВспомогательнаяСтрока.filePath);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат filePath;
	
КонецФункции

Функция НастройкаПрименима(Знач пСтрока, Знач пШаблон)
	
	Если пСтрока = пШаблон Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пШаблон) Тогда
		Возврат Истина;
	КонецЕсли;
	
	значениеИзКеша = ПолучитьИзКеша(пСтрока, пШаблон);
	
	Если Не значениеИзКеша = Неопределено Тогда
		
		Возврат значениеИзКеша;
		
	КонецЕсли;
	
	этоПоискПоРегВыр = СтрНайти(пШаблон, "*") > 0; // Для оптимизации считаем, что если и используются рег. выражения, то со звездой
	
	Если этоПоискПоРегВыр Тогда
		
		Попытка
			
			регВыражение = Новый РегулярноеВыражение(пШаблон);
			настройкаПрименима = регВыражение.Совпадает(пСтрока);
			
		Исключение
			
			_Лог.Ошибка("Ошибка сравнения ""%1"" с рег. выражением ""%2""", пСтрока, пШаблон);
			_Лог.Ошибка(ОписаниеОшибки());
			настройкаПрименима = Ложь;
			
		КонецПопытки;
		
	Иначе
		
		настройкаПрименима = Ложь;
		
	КонецЕсли;
	
	ПоместитьВКеш(пСтрока, пШаблон, настройкаПрименима);
	
	Возврат настройкаПрименима;
	
КонецФункции

#Область Кеш

Функция ПолучитьИзКеша(Знач пСтрока, Знач пШаблон)
	
	ИнициализироватьКеш(пСтрока, пШаблон);
	
	Возврат _КешПравил[пШаблон][пСтрока];
	
КонецФункции

Процедура ПоместитьВКеш(Знач пСтрока, Знач пШаблон, Знач пЗначение)
	
	ИнициализироватьКеш(пСтрока, пШаблон);
	
	_КешПравил[пШаблон].Вставить(пСтрока, пЗначение);
	
КонецПроцедуры

Процедура ИнициализироватьКеш(Знач пСтрока, Знач пШаблон)
	
	Если _КешПравил = Неопределено Тогда
		
		_КешПравил = Новый Соответствие;
		
	КонецЕсли;
	
	КешПоШаблону = _КешПравил[пШаблон];
	
	Если КешПоШаблону = Неопределено Тогда
		
		КешПоШаблону = Новый Соответствие;
		_КешПравил.Вставить(пШаблон, КешПоШаблону);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ФайлНаПоддержке(Знач пОшибка)
	
	Если _УдалятьПоддержку = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	путьКФайлу = пОшибка.primaryLocation.filePath;
	
	Если Не ЗначениеЗаполнено(путьКФайлу) Тогда
		
		_Лог.Ошибка("Не указан путь для ошибки: %1. %2", пОшибка.ruleId, пОшибка.primaryLocation.message);
		
		Возврат Истина; // Вернем истину, чтобы эта строка была удалена
		
	КонецЕсли;
	
	путьКФайлу = ОбеспечитьПутьКФайлуСИсходнымКодом(путьКФайлу);
	
	текУровень = _ДанныеПоддержки.Уровень(путьКФайлу);
	
	Возврат текУровень <= _УдалятьПоддержку;
	
КонецФункции

Функция ОбеспечитьПутьКФайлуСИсходнымКодом(Знач пИмяФайла)
	
	существующийПуть = _ФайлыСИсходнымКодом[пИмяФайла];
	
	Если Не существующийПуть = Неопределено Тогда
		
		Возврат существующийПуть;
		
	КонецЕсли;
	
	абсолютныйПутьКФайлу = ОбщегоНазначения.АбсолютныйПуть(пИмяФайла);
	
	Если ОбщегоНазначения.ФайлСуществует(абсолютныйПутьКФайлу)
		ИЛИ ВРег(абсолютныйПутьКФайлу) = ВРег(СтрЗаменить(пИмяФайла, "\", "/")) // может быть указан абсолютный путь и файл не существовать
		Тогда
		
		_ФайлыСИсходнымКодом.Вставить(пИмяФайла, абсолютныйПутьКФайлу);
		Возврат абсолютныйПутьКФайлу;
		
	КонецЕсли;
	
	путьСУчетомКаталогаИсходников = _КаталогИсходников + "/" + пИмяФайла;
	
	абсолютныйПутьКФайлу = ОбщегоНазначения.АбсолютныйПуть(путьСУчетомКаталогаИсходников);
	
	Если ОбщегоНазначения.ФайлСуществует(абсолютныйПутьКФайлу) Тогда
		
		_ФайлыСИсходнымКодом.Вставить(пИмяФайла, абсолютныйПутьКФайлу);
		Возврат абсолютныйПутьКФайлу;
		
	КонецЕсли;
	
	_ФайлыСИсходнымКодом.Вставить(пИмяФайла, пИмяФайла);
	Возврат пИмяФайла;
	
КонецФункции

Процедура ПодготовитьФильтрПоПодсистемам()
	
	_ДанныеФильтраПоПодсистемам = Новый Структура;
	
	_ДанныеФильтраПоПодсистемам.Вставить("ЕстьОтбор", Ложь);
	_ДанныеФильтраПоПодсистемам.Вставить("ЕстьИсключения", Ложь);
	
	Если Не ЗначениеЗаполнено(_ФильтрПоПодсистемам) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	инфоОКонфигурации = Новый ИнформацияОКонфигурации(_КаталогИсходников);
	
	_ФильтрПоПодсистемам = СтрЗаменить(_ФильтрПоПодсистемам, ";", ",");
	
	объектыОтбор = Новый Соответствие;
	объектыИсключения = Новый Соответствие;

	ОПЕРАЦИЯ_ДОБАВЛЕНИЕ = "+";
	ОПЕРАЦИЯ_ИСКЛЮЧЕНИЕ = "-";
	
	Для каждого цПодсистема Из СтрРазделить(_ФильтрПоПодсистемам, ",") Цикл
		
		Если СтрНачинаетсяС(цПодсистема, "-") Тогда
			
			операция = ОПЕРАЦИЯ_ИСКЛЮЧЕНИЕ;
			
		Иначе
			
			операция = ОПЕРАЦИЯ_ДОБАВЛЕНИЕ;
			
		КонецЕсли;
		
		учитыватьРодительскиеПодсистемы = СтрНайти(цПодсистема, "^");
		учитыватьПодчиненныеПодсистемы = СтрНайти(цПодсистема, "*");
		
		имяПодсистемы = СтрЗаменить(цПодсистема, "+", "");
		имяПодсистемы = СтрЗаменить(имяПодсистемы, "-", "");
		имяПодсистемы = СтрЗаменить(имяПодсистемы, "*", "");
		имяПодсистемы = СтрЗаменить(имяПодсистемы, "^", "");
		
		объекты = инфоОКонфигурации.ОбъектыПодсистемы(имяПодсистемы, учитыватьПодчиненныеПодсистемы, учитыватьРодительскиеПодсистемы);

		Если операция = ОПЕРАЦИЯ_ИСКЛЮЧЕНИЕ Тогда

			ЗаполнитьСоответствиеПоМассиву(объектыИсключения, объекты);
			УдалитьЭлементыСоответствия(объектыОтбор, объекты);

			_ДанныеФильтраПоПодсистемам.Вставить("ЕстьИсключения", Истина);

		Иначе

			ЗаполнитьСоответствиеПоМассиву(объектыОтбор, объекты);
			УдалитьЭлементыСоответствия(объектыИсключения, объекты);

			_ДанныеФильтраПоПодсистемам.Вставить("ЕстьОтбор", Истина);

		КонецЕсли;
		
	КонецЦикла;

	_ДанныеФильтраПоПодсистемам.Вставить("Отбор", объектыОтбор);
	_ДанныеФильтраПоПодсистемам.Вставить("Исключения", объектыИсключения);

	_ДанныеФильтраПоПодсистемам.Вставить("КешФайловКУдалению", Новый Соответствие);
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеПоМассиву(пСоответствие, Знач пМассив)
	
	Для каждого цЭлемент Из пМассив Цикл
		
		пСоответствие.Вставить(цЭлемент, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЭлементыСоответствия(пСоответствие, Знач пМассив)
	
	Для каждого цЭлемент Из пМассив Цикл
		
		Если Не пСоответствие[цЭлемент] = Неопределено Тогда
			
			пСоответствие.Удалить(цЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

